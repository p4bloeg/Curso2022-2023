# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uBKuPZtRzuyIjslZz0-VFpv0ZOkcxlnW

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results

#RDFLib
print("RDFLib:")
ns = Namespace("http://somewhere#")
for sub, per, obj in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(sub, "es subclase de Person.")

#SPARQL
print("SPARQL:")
from rdflib.plugins.sparql import prepareQuery
myQuery = prepareQuery('''
  SELECT DISTINCT ?x
  WHERE{
	  ?x rdfs:subClassOf ns:Person       
  }							                                            
  ''',
  initNs = {"rdfs": RDFS, "ns": ns}
)
for i in g.query(myQuery):
  print(i)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results

#RDFLib
print("RDFLib:")
ns = Namespace("http://somewhere#")
for sub, per, obj in g.triples((None, RDF.type, ns.Person)):
  print(sub, "is of Person type.")
for sub, per, obj in g.triples((None, RDFS.subClassOf, ns.Person)):
  for sub2, per2, obj2 in g.triples((None, RDF.type, sub)):
    print(sub2, "is subclass of ", sub, "which in turn is of Person type.")


#SPARQL
print("SPARQL:")
from rdflib.plugins.sparql import prepareQuery
myQuery = prepareQuery('''
  SELECT DISTINCT ?x
  WHERE{
    {?x rdf:type ns:Person} UNION
	  {
    ?p (rdfs:subClassOf/rdfs:subClassOf*) ns:Person .
    ?x rdf:type ?p
    } 
  }
  ''',
  initNs = {"rdf": RDF, "rdfs": RDFS, "ns": ns}
)
for i in g.query(myQuery):
  print(i)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO
# Visualize the results

#RDFLib
print("RDFLib:")
ns = Namespace("http://somewhere#")
for sub, per, obj in g.triples((None, RDF.type, ns.Person)):
  for sub2, per2, obj2 in g.triples((sub, None, None)):
    print(sub2, per2, obj2)
for sub, per, obj in g.triples((None, RDFS.subClassOf, ns.Person)):
  for sub2, per2, obj2 in g.triples((None, RDF.type, sub)):
    for sub3, per3, obj3 in g.triples((sub2, None, None)):
      print(sub3, per3, obj3)

#SPARQL
print("SPARQL:")
from rdflib.plugins.sparql import prepareQuery
myQuery = prepareQuery('''
  SELECT DISTINCT ?sub ?pre ?obj
  WHERE{
  	{
    ?sub rdf:type ?s2 .
    ?s2 (rdfs:subClassOf/rdfs:subClassOf*) ns:Person .
    ?ssub ?pre ?obj
    } UNION {
    ?sub rdf:type ns:Person .
    ?sub ?pre ?obj
    }
  }
  ''',
  initNs = {"rdf": RDF, "rdfs": RDFS, "ns": ns}
)
for i in g.query(myQuery):
  print(i)