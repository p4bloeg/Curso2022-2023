# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18P0xTS31q1P7nR4efg0Yy3QrClOxqMAe

**Task 08: Completing missing data**
"""

#pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"resources/data01.rdf", format="xml")
g2.parse(github_storage+"resources/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery

VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns= Namespace("http://data.org#")
print("----------- DATA -----------\nGraph 1 :")
for (s,p,o) in g1.triples((None,None,None)):
  print(s,p,o)
print("\n")
print("\n")
for (s,p,o) in g1.triples((None,RDF.type,ns.Person)):
  print("Graph 1 Person:",s,p,o)
  print("\nGraph 2 Data:")
  for (s2,p2,o2) in g2.triples((s,None,None)):
    print(s2,p2,o2)
  print("\n")
  print("\n")
print("----------------------\n")

for (s,p,o) in g1.triples((None,RDF.type,ns.Person)):
  q1 = prepareQuery('''
  SELECT ?Given ?EMAIL ?Family WHERE { 
   ?s vcard:Given ?Given. 
   ?s vcard:EMAIL ?EMAIL. 
   ?s vcard:Family ?Family
  }
  ''',
  initNs = { "vcard": VCARD}
  )
  for r in g2.query(q1,initBindings = { "s": s }):
    print(r.Given)
    print(r.EMAIL)
    print(r.Family)
    if r.Given is not None:
      g1.add((s,VCARD.Given,Literal(r.Given)))
    if r.EMAIL is not None:
      g1.add((s,VCARD.EMAIL,Literal(r.EMAIL)))
    if r.Family is not None:
      g1.add((s,VCARD.Family,Literal(r.Family)))

print("\n----------- RESULT ----------- \nGraph 1 :")
for (s,p,o) in g1.triples((None,None,None)):
  print(s,p,o)
