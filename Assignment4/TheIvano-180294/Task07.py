# -*- coding: utf-8 -*-
"""Task07.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE
**Task 07: Querying RDF(s)**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS

g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage + "/resources/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**
"""

from rdflib.plugins.sparql import prepareQuery

NameSpaceitor = Namespace("http://somewhere#")

# RDFLib
# TO DO
for s, p, o in g.triples((None, RDFS.subClassOf, NameSpaceitor.Person)):
    print(s)

for s2, p2, o1 in g.triples((None, RDFS.subClassOf, s)):
    print(s2)

# SPARQL
# TO DO

q1 = prepareQuery('''
  SELECT ?individual WHERE {
      ?individual rdfs:subClassOf <http://somewhere#Person>.
  }
  ''',
                  initNs={"rdfs": RDFS}
                  )

# Visualize the results
for r in g.query(q1):
    print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**
"""

# RDFLib
# TO DO

for s, p, o in g.triples((None, RDF.type, NameSpaceitor.Person)):
    print(s)

for s2, p2, o2 in g.triples((None, RDFS.subClassOf, NameSpaceitor.Person)):
    for s3, p3, o3 in g.triples((None, RDF.type, s2)):
        print(s3)

# SPARQL
# TO DO
q2 = prepareQuery('''
  SELECT DISTINCT ?s
  WHERE { 
    {
      ?s rdf:type ns:Person. 
    }
    UNION {
      ?p rdfs:subClassOf* ns:Person. # I think u mean this. Otherwise I saw online that you can add "rdfs:smth/rdfs:smth*". Is that what's missing?
      ?s rdf:type ?p
    }
  }

  ''',
                  initNs={"rdfs": RDFS, "rdf": RDF, "ns": NameSpaceitor}
                  )

# Visualize the results
for r in g.query(q2):
    print(r)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**
"""

# RDFLib
# TO DO

for s1, p1, o1 in g.triples((None, RDF.type, NameSpaceitor.Person)):
    for s2, p2, o2 in g.triples((s1, None, None)):
        print(s2, p2, o2)

for a1, b1, res in g.triples((None, RDFS.subClassOf, NameSpaceitor.Person)):
    for a2, b2, c2 in g.triples((None, RDF.type, a1)):
        for a3, b3, c3 in g.triples((a2, None, None)):
            print(a3, b3, c3)  # not sure if this is what it is expected tbh

# SPARQL
# TO DO

q3 = prepareQuery('''
  SELECT DISTINCT ?s ?p ?o
  WHERE{
  	{
       ?s rdf:type ns:Person.
       ?s ?p ?o
     } 
    UNION {
        ?s2 rdfs:subClassOf* ns:Person. #same here
        ?s rdf:type ?s2 .
       ?s ?p ?o
      }
    }
  ''',
        initNs={"rdf": RDF, "rdfs": RDFS, "ns": NameSpaceitor}
    )

# Visualize the results
for r in g.query(q3):
    print(r)
